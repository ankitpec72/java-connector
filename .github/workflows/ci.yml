name: CI - Build & Test

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [17]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Validate Project Structure
        run: |
          echo "Validating project structure..."
          mvn validate

      - name: Compile Project
        run: |
          echo " Compiling project..."
          mvn compile

      - name:  Run Unit Tests
        run: |
          echo "Running unit tests..."
          mvn test

      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          mvn verify

      - name: Generate Test Reports
        if: always()
        run: |
          echo "Generating test reports..."
          mvn surefire-report:report

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-java-${{ matrix.java }}
          path: |
            target/surefire-reports/
            target/site/surefire-report.html

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: matrix.java == '17'
        with:
          name: coverage-reports
          path: target/site/jacoco/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Check Code Formatting (Spotless)
        run: |
          echo "Checking code formatting..."
          mvn spotless:check

      - name:  Run Code Quality Checks
        run: |
          echo "Running code quality analysis..."
          mvn compile test-compile

      - name: Security Scan
        continue-on-error: true
        run: |
          echo "Running security scan..."
          mvn org.owasp:dependency-check-maven:check

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
      - name: checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build JAR (without signing)
        run: |
          echo "Building JAR artifacts..."
          mvn clean package -Dgpg.skip=true

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/*.pom

      - name: Verify Build Success
        run: |
          echo "Build verification completed successfully!"
          ls -la target/
          echo "JAR file details:"
          ls -lh target/*.jar || echo "No JAR files found"

  pr-validation:
    name: PR Validation
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [test, code-quality, build-verification]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate PR Title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "Validating PR title format..."
          echo "PR Title: $PR_TITLE"
          
          # Check if PR title follows conventional commit format or is descriptive
          if echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|BREAKING)(\(.+\))?: .+|^[A-Z].+"; then
            echo "PR title format is valid"
          else
            echo " PR title should be descriptive or follow conventional commit format"
            echo "Examples:"
            echo "  - feat: Add retry mechanism"
            echo "  - fix: Connection timeout issue"  
            echo "  - Add support for SSL connections"
          fi

      - name: PR Summary
        env:
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_BASE: ${{ github.event.pull_request.base.ref }}
        run: |
          echo "PR Validation Summary:"
          echo "   Author: $PR_AUTHOR"
          echo "   Branch: $PR_BRANCH â†’ $PR_BASE"
          echo "   Status: All checks passed"