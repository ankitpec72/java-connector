name: CI - Build & Test

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [17]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Validate Project Structure
        run: |
          echo "Validating project structure..."
          mvn validate

      - name: Compile Project
        run: |
          echo "Compiling project..."
          mvn compile

      - name: Run Tests with Coverage
        run: |
          echo "Running tests with coverage..."
          mvn clean verify

      - name: Generate Test Reports
        if: always()
        run: |
          echo "Generating test reports..."
          mvn surefire-report:report

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-java-${{ matrix.java }}
          path: |
            target/surefire-reports/
            target/site/surefire-report.html

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: matrix.java == '17'
        with:
          name: coverage-reports
          path: target/site/jacoco/

  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "üîç Running SonarCloud analysis..."
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=ankitpec72_java-connector \
            -Dsonar.organization=ankitpec72 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Check Code Formatting (Spotless)
        run: |
          echo "‚ú® Checking code formatting..."
          mvn spotless:check

      - name: Run Code Quality Checks
        run: |
          echo "Running code quality analysis..."
          mvn compile test-compile


  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, code-quality, sonarcloud-analysis]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build JAR (without signing)
        run: |
          echo "Building JAR artifacts..."
          mvn clean package -Dgpg.skip=true

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/*.pom

      - name: Verify Build Success
        run: |
          echo "Build verification completed successfully!"
          ls -la target/
          echo "JAR file details:"
          ls -lh target/*.jar || echo "No JAR files found"

  pr-validation:
    name: PR Validation
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [test, code-quality, sonarcloud-analysis, build-verification]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate PR Title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "Validating PR title format..."
          echo "PR Title: $PR_TITLE"
          
          if echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|BREAKING)(\(.+\))?: .+|^[A-Z].+"; then
            echo "PR title format is valid"
          else
            echo "PR title should follow conventional commit format"
            echo "Examples: feat: Add retry mechanism, fix: Connection timeout"
          fi

      - name: PR Summary
        env:
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_BASE: ${{ github.event.pull_request.base.ref }}
        run: |
          echo "  PR Validation Summary:"
          echo "  Author: $PR_AUTHOR"
          echo "  Branch: $PR_BRANCH ‚Üí $PR_BASE"
          echo "  Status: All checks passed"
          echo "  SonarCloud: Quality gate results will be posted automatically"